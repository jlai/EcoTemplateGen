{{
    include "Shared/Utils"
    import eco

    $recipe = $.recipe
    $recipeClassName = $recipe.RecipeClassName ?? BaseName + "Recipe"
    $recipeDisplayName = $recipe.DisplayName ?? DisplayName

    $ingredients = $recipe.Ingredients ?? []
}}
{{~ if $recipe.Skill ~}}
[RequiresSkill(typeof({{ $recipe.Skill }}), {{ $recipe.SkillLevel ?? 1 }})]
{{~ end ~}}
[ForceCreateView]
public partial class {{ $recipeClassName }} : RecipeFamily
{
    public {{ $recipeClassName }}()
    {
        var recipe = new Recipe();
        recipe.Init(
            "{{ BaseName }}",  //noloc
            Localizer.DoStr("{{ $recipeDisplayName }}"),
            new List<IngredientElement>
            {
                {{~
                    for $ingredient in $ingredients
                        $args = []

                        $args[0] = choose $ingredient.Tag (string.literal $ingredient.Tag) (typeof $ingredient.Item)

                        $args[1] = $ingredient.Count ?? 1

                        if $ingredient.Skill
                            $args[2] = typeof $ingredient.Skill
                            $args[3] = typeof $ingredient.Talent
                        else
                            $args[2] = $ingredient.static | choose "true" "false"
                        end
                ~}}
                new IngredientElement({{ $args | array.join ', ' }}),{{ choose $ingredient.Tag " //noloc" "" }}
                {{~ end ~}}
            },
            new List<CraftingElement>
            {
                new CraftingElement<{{ ItemClassName }}>()
            });
        this.Recipes = new List<Recipe> { recipe };
        this.ExperienceOnCraft = {{ $recipe.ExperienceOnCraft ?? 5 }};
        {{~
            $calories = $recipe.LaborInCalories ?? 100
            $craftMinutes = $recipe.craftMinutes ?? 10

            $laborArgs = [$calories]
            $craftMinutesArgs = [$craftMinutes]

            if $recipe.Skill
                $laborArgs = array.add $laborArgs (typeof $recipe.Skill)
                $craftMinutesArgs = [(typeof $recipeClassName), $craftMinutes, (typeof $recipe.Skill)]
            end

            if $recipe.Talents
                for $talent in $recipe.Talents
                    $craftMinutesArgs = $craftMinutesArgs + ", " + (typeof $talent)
                end
            end
        ~}}
        this.LaborInCalories = CreateLaborInCaloriesValue({{ $laborArgs | array.join ", " }});
        this.CraftMinutes = CreateCraftTimeValue({{ $craftMinutesArgs | array.join ", " }});
        this.ModsPreInitialize();
        this.Initialize(Localizer.DoStr("{{ $recipeDisplayName }}"), typeof({{ $recipeClassName }}));
        this.ModsPostInitialize();
        CraftingComponent.AddRecipe(typeof({{ $recipe.tableObject ?? "CarpentryTableObject" }}), this);
    }

    /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
    partial void ModsPreInitialize();
    /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
    partial void ModsPostInitialize();
}
